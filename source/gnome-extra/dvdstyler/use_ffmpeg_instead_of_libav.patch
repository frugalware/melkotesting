diff -Naur DVDStyler-2.2/src/mediaenc_ffmpeg.cpp DVDStyler-2.2.new/src/mediaenc_ffmpeg.cpp
--- DVDStyler-2.2/src/mediaenc_ffmpeg.cpp	2012-03-04 18:36:10.000000000 +0100
+++ DVDStyler-2.2.new/src/mediaenc_ffmpeg.cpp	2012-05-21 18:06:11.000000000 +0200
@@ -3,7 +3,7 @@
 // Purpose:     FFMPEG Media Encoder
 // Author:      Alex Thuering
 // Created:     04.08.2007
-// RCS-ID:      $Id: mediaenc_ffmpeg.cpp,v 1.28 2012/03/04 17:36:10 ntalex Exp $
+// RCS-ID:      $Id: mediaenc_ffmpeg.cpp,v 1.27 2011/08/02 19:03:48 ntalex Exp $
 // Copyright:   (c) Alex Thuering
 // Licence:     GPL
 /////////////////////////////////////////////////////////////////////////////
@@ -26,7 +26,6 @@
 #define __STDC_LIMIT_MACROS
 #include <libavformat/avformat.h>
 #include <libswscale/swscale.h>
-#include <libavutil/mathematics.h>
 }
 
 #define AUDIO_BUF_SIZE 524288
@@ -167,18 +166,12 @@
 
 	AVCodecContext* c = m_audioStm->codec;
 	c->thread_count = m_threadCount;
-	c->time_base.den = 25;
-	c->time_base.num = 1;
 	c->codec_id = (CodecID) codecId;
 	c->codec_type = AVMEDIA_TYPE_AUDIO;
 	c->bit_rate = 64000;
 	c->sample_rate = 48000;
 	c->sample_fmt = codecId == CODEC_ID_AC3 ? AV_SAMPLE_FMT_FLT : AV_SAMPLE_FMT_S16;
 	c->channels = 2;
-	// some formats want stream headers to be separate
-	if(m_outputCtx->oformat->flags & AVFMT_GLOBALHEADER)
-	    c->flags |= CODEC_FLAG_GLOBAL_HEADER;
-
 	return true;
 }
 
diff -Naur DVDStyler-2.2/src/mediatrc_ffmpeg.cpp DVDStyler-2.2.new/src/mediatrc_ffmpeg.cpp
--- DVDStyler-2.2/src/mediatrc_ffmpeg.cpp	2012-04-29 21:28:04.000000000 +0200
+++ DVDStyler-2.2.new/src/mediatrc_ffmpeg.cpp	2012-05-21 18:51:02.000000000 +0200
@@ -3,7 +3,7 @@
 // Purpose:     FFMPEG Media Transcoder
 // Author:      Alex Thuering
 // Created:     26.04.2008
-// RCS-ID:      $Id: mediatrc_ffmpeg.cpp,v 1.44 2012/04/29 19:28:04 ntalex Exp $
+// RCS-ID:      $Id: mediatrc_ffmpeg.cpp,v 1.41 2012/01/22 20:40:34 ntalex Exp $
 // Copyright:   (c) Alex Thuering
 // Licence:     GPL
 /////////////////////////////////////////////////////////////////////////////
@@ -22,12 +22,11 @@
 #include <libavutil/fifo.h>
 #include <libavutil/dict.h>
 #include <libavutil/pixdesc.h>
-#include <libavutil/mathematics.h>
 #include <libswscale/swscale.h>
-#include <libavcodec/avcodec.h>
+#include <libavfilter/avcodec.h>
 #include <libavfilter/avfilter.h>
 #include <libavfilter/avfiltergraph.h>
-#include <libavfilter/vsrc_buffer.h>
+#include <libavfilter/buffersink.h>
 }
 
 #define AUDIO_BUF_SIZE 50000
@@ -47,68 +46,6 @@
 #if LIBAVFORMAT_VERSION_INT < AV_VERSION_INT(53, 4, 0)
 #define AVIO_FLAG_WRITE AVIO_WRONLY
 #endif
-#define CODEC_CAP_LOSSLESS         0x80000000
-
-static int avsink_init(AVFilterContext *ctx, const char *args, void *opaque)
-{
-    AVSinkContext *priv =(AVSinkContext *)ctx->priv;
-
-    if (!opaque)
-        return AVERROR(EINVAL);
-    *priv = *(AVSinkContext *)opaque;
-
-    return 0;
-}
-
-static void null_end_frame(AVFilterLink *inlink) { }
-
-static int avsink_query_formats(AVFilterContext *ctx)
-{
-    AVSinkContext *priv = (AVSinkContext *)ctx->priv;
-    enum PixelFormat pix_fmts[] = { priv->pix_fmt, PIX_FMT_NONE };
-
-    avfilter_set_common_formats(ctx, avfilter_make_format_list((const int*)pix_fmts));
-    return 0;
-}
-
-AVFilter avsink = {
-    "avsink",
-    sizeof(AVSinkContext),
-    avsink_init,
-    NULL,
-    avsink_query_formats,
-    (AVFilterPad[]) {{ "default",
-                       AVMEDIA_TYPE_VIDEO,
-                       AV_PERM_READ,
-                       0,
-                       NULL,
-                       NULL,
-                       NULL,
-                       null_end_frame,
-                       },
-                       { NULL }},
-    (AVFilterPad[]) {{ NULL }},
-};
-
-int get_filtered_video_frame(AVFilterContext *ctx, AVFrame *frame, AVFilterBufferRef **picref_ptr, AVRational *tb) {
-	int ret;
-	AVFilterBufferRef *picref;
-
-	if ((ret = avfilter_request_frame(ctx->inputs[0])) < 0)
-		return ret;
-	if (!(picref = ctx->inputs[0]->cur_buf))
-		return AVERROR(ENOENT);
-	*picref_ptr = picref;
-	ctx->inputs[0]->cur_buf = NULL;
-	*tb = ctx->inputs[0]->time_base;
-
-	memcpy(frame->data, picref->data, sizeof(frame->data));
-	memcpy(frame->linesize, picref->linesize, sizeof(frame->linesize));
-	frame->interlaced_frame = picref->video->interlaced;
-	frame->top_field_first = picref->video->top_field_first;
-
-	return 1;
-}
 
 //////////////////////////// AVAudioConvert /////////////////////////////////
 // audioconvert.h
@@ -237,7 +174,7 @@
                                        "src", args, NULL, ost->graph);
     if (ret < 0)
         return ret;
-    ret = avfilter_graph_create_filter(&ost->output_video_filter, &avsink,
+    ret = avfilter_graph_create_filter(&ost->output_video_filter, avfilter_get_by_name("buffersink"),
                                        "out", NULL, pix_fmts, ost->graph);
     if (ret < 0)
         return ret;
@@ -260,8 +197,8 @@
     ost->graph->scale_sws_opts = av_strdup(args);
 
     if (ost->avfilter) {
-        AVFilterInOut *outputs = (AVFilterInOut*) av_malloc(sizeof(AVFilterInOut));
-        AVFilterInOut *inputs  = (AVFilterInOut*) av_malloc(sizeof(AVFilterInOut));
+        AVFilterInOut *outputs = avfilter_inout_alloc();
+        AVFilterInOut *inputs  = avfilter_inout_alloc();
 
         outputs->name    = av_strdup("in");
         outputs->filter_ctx = last_filter;
@@ -273,7 +210,7 @@
         inputs->pad_idx = 0;
         inputs->next    = NULL;
 
-        if ((ret = avfilter_graph_parse(ost->graph, ost->avfilter, inputs, outputs, NULL)) < 0)
+        if ((ret = avfilter_graph_parse(ost->graph, ost->avfilter, &inputs, &outputs, NULL)) < 0)
             return ret;
         av_freep(&ost->avfilter);
     } else {
@@ -1170,7 +1107,7 @@
 		audio_enc->flags |= CODEC_FLAG_GLOBAL_HEADER;
 	}
 	if (audioFormat != afCOPY) {
-		audio_enc->bit_rate= bitrate*1000;
+		av_set_int(audio_enc, "b:a", bitrate*1000);
 		
 		if (audio_qscale > QSCALE_NONE) {
 			audio_enc->flags |= CODEC_FLAG_QSCALE;
@@ -1179,6 +1116,7 @@
 		}
         if (audio_channels)
             audio_enc->channels = audio_channels;
+		audio_enc->sample_fmt = audio_sample_fmt;
 		if (audio_sample_fmt != AV_SAMPLE_FMT_NONE)
 			audio_enc->sample_fmt = audio_sample_fmt;
 		if (audio_sample_rate)
@@ -2141,12 +2079,11 @@
 			for(i=0;i<nb_output_streams;i++) {
 				ost = &ost_table[i];
 				if (ost->input_video_filter && ost->source_index == ist_index) {
-					if (ist->st->sample_aspect_ratio.num)
+					if (!picture.sample_aspect_ratio.num)
 						picture.sample_aspect_ratio = ist->st->sample_aspect_ratio;
-					//picture.pts = ist->pts;
+					picture.pts = ist->pts;
 
-					av_vsrc_buffer_add_frame(ost->input_video_filter, &picture,
-						ist->pts, picture.sample_aspect_ratio);
+					av_vsrc_buffer_add_frame(ost->input_video_filter, &picture, AV_VSRC_BUF_FLAG_OVERWRITE);
 				}
 			}
 		}
@@ -2154,58 +2091,16 @@
 		// preprocess audio (volume)
 		if (ist->st->codec->codec_type == AVMEDIA_TYPE_AUDIO) {
 			if (m_audioVolume.find(ist_index) != m_audioVolume.end() && m_audioVolume[ist_index] != 256) {
-				switch (ist->st->codec->sample_fmt) {
-				        case AV_SAMPLE_FMT_U8:
-				        {
-				            uint8_t *volp = (uint8_t*) samples;
-				            for (i = 0; i < (decoded_data_size / sizeof(*volp)); i++) {
-				                int v = (((*volp - 128) * m_audioVolume[ist_index] + 128) >> 8) + 128;
-				                *volp++ = av_clip_uint8(v);
-				            }
-				            break;
-				        }
-				        case AV_SAMPLE_FMT_S16:
-				        {
-				            int16_t *volp = (int16_t*) samples;
-				            for (i = 0; i < (decoded_data_size / sizeof(*volp)); i++) {
-				                int v = ((*volp) * m_audioVolume[ist_index] + 128) >> 8;
-				                *volp++ = av_clip_int16(v);
-				            }
-				            break;
-				        }
-				        case AV_SAMPLE_FMT_S32:
-				        {
-				            int32_t *volp = (int32_t*) samples;
-				            for (i = 0; i < (decoded_data_size / sizeof(*volp)); i++) {
-				                int64_t v = (((int64_t)*volp * m_audioVolume[ist_index] + 128) >> 8);
-				                *volp++ = av_clipl_int32(v);
-				            }
-				            break;
-				        }
-				        case AV_SAMPLE_FMT_FLT:
-				        {
-				            float *volp = (float*) samples;
-				            float scale = m_audioVolume[ist_index] / 256.f;
-				            for (i = 0; i < (decoded_data_size / sizeof(*volp)); i++) {
-				                *volp++ *= scale;
-				            }
-				            break;
-				        }
-				        case AV_SAMPLE_FMT_DBL:
-				        {
-				            double *volp = (double*) samples;
-				            double scale = m_audioVolume[ist_index] / 256.;
-				            for (i = 0; i < (decoded_data_size / sizeof(*volp)); i++) {
-				                *volp++ *= scale;
-				            }
-				            break;
-				        }
-				        default:
-				            av_log(NULL, AV_LOG_FATAL,
-				                   "Audio volume adjustment on sample format %s is not supported.\n",
-				                   av_get_sample_fmt_name(ist->st->codec->sample_fmt));
-				            return false;
-				        }
+				short *volp;
+				volp = samples;
+				for (i=0; i<(int)(decoded_data_size / sizeof(short)); i++) {
+					int v = ((*volp) * m_audioVolume[ist_index] + 128) >> 8;
+					if (v < -32768)
+						v = -32768;
+					if (v > 32767)
+						v = 32767;
+					*volp++ = v;
+				}
 			}
 		}
 		
@@ -2236,11 +2131,12 @@
 				frame_available = ist->st->codec->codec_type != AVMEDIA_TYPE_VIDEO ||
 					!ost->output_video_filter || avfilter_poll_frame(ost->output_video_filter->inputs[0]);
 				while (frame_available) {
-					AVRational ist_pts_tb;
-
 					if (ist->st->codec->codec_type == AVMEDIA_TYPE_VIDEO && ost->output_video_filter) {
-						get_filtered_video_frame(ost->output_video_filter, &picture, &ost->picref, &ist_pts_tb);
+						AVRational ist_pts_tb = ost->output_video_filter->inputs[0]->time_base;
+						if (av_vsink_buffer_get_video_buffer_ref(ost->output_video_filter, &ost->picref, 0) < 0)
+							goto cont;
 						if (ost->picref) {
+							avfilter_fill_frame_from_video_buffer_ref(&picture, ost->picref);
 							ist->pts = av_rescale_q(ost->picref->pts, ist_pts_tb, AV_TIME_BASE_Q);
 						}
 					}
@@ -2259,7 +2155,7 @@
 							break;
 						case AVMEDIA_TYPE_VIDEO:
                             if (ost->picref->video)
-                                ost->st->codec->sample_aspect_ratio = ost->picref->video->pixel_aspect;
+                                ost->st->codec->sample_aspect_ratio = ost->picref->video->sample_aspect_ratio;
 							if (!DoVideoOut(os, ost, ist, &picture, &frame_size, bit_buffer_size, bit_buffer))
 								return false;
 //							if (vstats_filename && frame_size)
diff -Naur DVDStyler-2.2/src/mediatrc_ffmpeg.h DVDStyler-2.2.new/src/mediatrc_ffmpeg.h
--- DVDStyler-2.2/src/mediatrc_ffmpeg.h	2012-03-04 18:36:10.000000000 +0100
+++ DVDStyler-2.2.new/src/mediatrc_ffmpeg.h	2012-05-21 18:07:18.000000000 +0200
@@ -3,7 +3,7 @@
 // Purpose:     FFMPEG Media Transcoder
 // Author:      Alex Thuering
 // Created:     26.04.2008
-// RCS-ID:      $Id: mediatrc_ffmpeg.h,v 1.24 2012/03/04 17:36:10 ntalex Exp $
+// RCS-ID:      $Id: mediatrc_ffmpeg.h,v 1.23 2012/01/22 20:40:34 ntalex Exp $
 // Copyright:   (c) Alex Thuering
 // Licence:     GPL
 /////////////////////////////////////////////////////////////////////////////
@@ -23,10 +23,6 @@
 #define __STDC_LIMIT_MACROS
 #include <libavformat/avformat.h>
 #include <libswscale/swscale.h>
-
-typedef struct {
-    enum PixelFormat pix_fmt;
-} AVSinkContext;
 }
 
 // select an input stream for an output stream
