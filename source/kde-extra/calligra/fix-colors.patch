--- a/libs/widgets/KoColorPopupAction.cpp
+++ b/libs/widgets/KoColorPopupAction.cpp
@@ -45,7 +45,7 @@
 class KoColorPopupAction::KoColorPopupActionPrivate
 {
 public:
-    KoColorPopupActionPrivate() 
+    KoColorPopupActionPrivate()
         : colorSetWidget(0), colorChooser(0), opacitySlider(0), menu(0), checkerPainter(4)
         , showFilter(true), applyMode(true)
     {}
@@ -81,7 +81,9 @@ KoColorPopupAction::KoColorPopupAction(Q
 
     KoResourceServer<KoColorSet>* srv = KoResourceServerProvider::instance()->paletteServer();
     QList<KoColorSet*> palettes = srv->resources();
-    d->colorSetWidget->setColorSet(palettes.first());
+    if (palettes.size() > 0) {
+        d->colorSetWidget->setColorSet(palettes.first());
+    }
 
     d->colorChooser = new KoTriangleColorSelector( widget );
     // prevent mouse release on color selector from closing popup
@@ -109,9 +111,9 @@ KoColorPopupAction::KoColorPopupAction(Q
 
     connect(d->colorSetWidget, SIGNAL(colorChanged(const KoColor &, bool)), this, SLOT(colorWasSelected(const KoColor &, bool)));
 
-    connect( d->colorChooser, SIGNAL( colorChanged( const QColor &) ), 
+    connect( d->colorChooser, SIGNAL( colorChanged( const QColor &) ),
              this, SLOT( colorWasEdited( const QColor &) ) );
-    connect( d->opacitySlider, SIGNAL(valueChanged(int)), 
+    connect( d->opacitySlider, SIGNAL(valueChanged(int)),
              this, SLOT(opacityWasChanged(int)));
 }
 
@@ -169,7 +171,7 @@ void KoColorPopupAction::updateIcon( )
     {
         pm = QImage(iconSize, QImage::Format_ARGB32_Premultiplied);
         pm.fill(Qt::transparent);
-        // there was no icon set so we assume 
+        // there was no icon set so we assume
         // that we create an icon from the current color
         d->applyMode = false;
     }

